{% extends model('component') %}

{% define config = {
    name: 'product-quick-add-fields',
    tag: 'product-quick-add-fields',
} %}

{% define data = {
    form: required,
    verticalLayout: false,
    minQuantity: 1,
    maxQuantity: null,
    quantityInterval: 1,
    messages: null,
    isDisabled: false,
} %}

{% block body %}
    {% include molecule('ajax-provider') with {
        class: config.jsName ~ '__provider ',
        attributes: {
            url: path('product-additional-data')
        }
    } only %}

    {% include molecule('ajax-renderer') with {
        class: config.jsName ~ '__renderer',
        attributes: {
            'provider-selector': '.' ~ config.jsName ~ '__provider',
            'target-selector': '.' ~ config.jsName ~ '__target'
        }
    } only %}


    <div class="{{ config.jsName }}__target">
        {% do data.form.sku.setRendered %}
        <div class="col col--sm-12 {{ data.verticalLayout ? 'spacing-bottom' : 'col--md-8 spacing-right spacing-right--inner' }}">
            {% widget 'ProductConcreteSearchWidget' args [
                'ajax-provider' ~ config.name,
                data.form.sku.vars.full_name,
            ] only %}
            {% endwidget %}
        </div>

        <div class="col col--sm-12 {{ data.verticalLayout ? 'spacing-bottom' : 'col--md-4 spacing-right spacing-right--inner' }}">
            {{ form_widget(data.form.children.quantity, {
                required: true,
                attr: {
                    class: config.jsName ~ '__quantity',
                    min: data.minQuantity,
                    max: data.maxQuantity,
                    step: data.quantityInterval,
                    disabled: data.form.sku.vars.value is empty or isDisabled,
                    value: data.form.sku.vars.value is empty or isDisabled ? null : data.minQuantity,
                    placeholder: 'product_quick_add_widget.form.quantity' | trans
                }}
            ) }}
        </div>
    </div>

    {% if data.messages is not empty %}
        {% for message in data.messages %}
            <div class="{{ config.name }}__message {{ config.name }}__message--{{ message.type }} spacing-bottom spacing-bottom--big">
                {{ message.value | trans(
                    message.parameters
                ) }}
            </div>
        {% endfor %}
    {% endif %}
{% endblock %}
